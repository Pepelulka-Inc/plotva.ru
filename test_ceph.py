import asyncio
from src.plotva.plugins.s3 import plugin_init, get_or_create_bucket
from src.plotva.plugins.s3 import CephStorageProvider


async def test_ceph_operations():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å Ceph —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ceph —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")

    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
    TEST_BUCKET = "plotva"
    TEST_FILE = "test.txt"
    TEST_CONTENT = "meow meow meow"

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Ceph
    ENDPOINT_URL = "https://s3.ru-7.storage.selcloud.ru "  # –£–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    ACCESS_KEY = "ef4a9dcfc2b04d9f95fe7c4b43dfe356"
    SECRET_KEY = "52e2ff3ef0c547f1966be1b57978c0cd"

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        init_gen = plugin_init(
            endpoint_url=ENDPOINT_URL,
            is_secure=True,  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ True –¥–ª—è HTTPS
            access_key=ACCESS_KEY,
            secret_key=SECRET_KEY,
        )

        s3_client = next(init_gen)  # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        next(init_gen)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Type[CephAdapterProvider]
        next(init_gen)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Type[CephStorageProvider]

        # 2. –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –±–∞–∫–µ—Ç
        print(f"üìÇ –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –±–∞–∫–µ—Ç {TEST_BUCKET}...")
        get_or_create_bucket(s3_client, TEST_BUCKET)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ

        # 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_provider = CephStorageProvider(s3_client, TEST_BUCKET)
        storage = storage_provider.get_storage()

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ...")
        exists_before = await storage.exists(TEST_FILE)
        print(f"–§–∞–π–ª {TEST_FILE} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ —Ç–µ—Å—Ç–∞: {exists_before}")

        # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
        print(f"üíæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª {TEST_FILE}...")
        await storage.write_file(TEST_FILE, TEST_CONTENT)

        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
        exists_after = await storage.exists(TEST_FILE)
        print(f"–§–∞–π–ª {TEST_FILE} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏: {exists_after}")

        # 7. –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        content = await storage.read_file(TEST_FILE)
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")
        assert content == TEST_CONTENT, "‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º"
        print("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")

        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        files = await storage.list_all_filenames()
        print(f"–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ: {files}")
        assert TEST_FILE in files, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤"

        # 9. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–Ω–∏–º–æ–∫
        print("üì∏ –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∫–µ—Ç–∞...")
        snapshot = await storage.get_snapshot()
        print(f"–°–Ω–∏–º–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç {len(snapshot._snapshot)} –æ–±—ä–µ–∫—Ç–æ–≤")

        # 10. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {TEST_FILE}...")
        await storage.remove_file(TEST_FILE)

        # 11. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        exists_after_delete = await storage.exists(TEST_FILE)
        print(f"–§–∞–π–ª {TEST_FILE} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è: {exists_after_delete}")
        assert not exists_after_delete, "‚ùå –§–∞–π–ª –Ω–µ —É–¥–∞–ª–µ–Ω"

        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
        raise


if __name__ == "__main__":
    asyncio.run(test_ceph_operations())
